ROS2 IRON

необходимо установить: 
sudo apt install ros-iron-xacro ros-iron-joint-state-publisher-gui


1)создаем рабочее пространство 

mkdir dev_ws
cd dev_ws 
colcon build --symlink-install 
  
2)создаем пакет проекта

cd dev_ws/src
ros2 pkg create --build-type ament_cmake sm_robotics

и создаем папки в проекте cd ~dev_ws/src/sm_robotics/src
mkdir description launch config worlds 

чтобы использовать питон, сообщения используемые при навигации, добавляем пакеты в package.xml:
  <exec_depend>rospy</exec_depend>
  <exec_depend>rclpy</exec_depend>
  <exec_depend>std_msgs</exec_depend>
  <exec_depend>geometry_msgs</exec_depend>

3) создаем модель робота

чтобы папки использовались при построении, добавляем их в CMakeList.txt

install(DIRECTORY launch config description
 DESTINATION share/${PROJECT_NAME} )
 
 + лаунч и запускаемые файлы должны содержать все разрешения chmod a+rwx test.py
 
 
 4) Для отображения модели в Gazebo необходимо каждому link указать тэг collision и инерцию. Для упрощения расчета инерции используется скрипт.  Для запуска robot_state_publisher и газебо одновременно, создается launch файл, в котором прописывается запуск среды симуляции, спавн робота из формата urdf.
 
 5) для управления движением используется пакет ros2_control:
 
 sudo apt install ros-iron-ros2-control ros-iron-ros2-controllers ros-iron-gazebo-ros2-control
 
 создаем файл ros2_controll.xacro
 
 
 создается два файла. в одном описываются джоинты и как ими будет производиться управление. а так же подключается возможность этого управления в газебо (ros2_control.xacro). В конце делаем укзаание на файл конфигурации контроллеров (ниже)
 
 файл, в котором указываются параметры контроллеров. т.к. мы управляем скоростью, то это будет тип velocity_controllers/JointGroupVelocityController. Прописываем джоинты, которыми они управляют. (controllers.yaml)
 
 запускаются контроллеры в том же launch файле, где и газебо. 
 
     robot_controller_spawner = Node(
            package="controller_manager",
            executable="spawner",
            arguments=["steering_controller",
                       "drive_wheel_controller"],
        )
        
        
        
  6) не получается нормально управлять двумя контроллерами скорости. джоинт, отвечающий за привод поворота, самопроизвольно отклоняется и робот движется в сторону. в качестве попытки используется sudo apt install ros-iron-joint-trajectory-controller
  
  пока остановился на контроллере поворота для привода поворота и контроллере скорости для мотор-колеса. Управляются они через соответсвующие топики с помощью созданной ноды pos_speed_control.py
  
  При изменении конфигурации робота (диаметра мотор-колеса) необходимо изменить эти данные в ноде одометрии. одометрия рассчитывается из принципа:
  
  V = r*w   Vx = v*cos(theta) Vy = v*sin(theta)
  
  изменения положения dx = Vx*dt  dy = Vy*dt
  
  не актуально по причине того, что в этом случае не учитывается наличие вспомогательных колес на вилах. Одометрию пробую считать по статье: https://nabinsharma.wordpress.com/2014/01/02/kinematics-of-a-robot-bicycle-model/
  
  чтобы использовать преобразования tf, устанавливается библиотека sudo apt install ros-iron-tf-transformations
